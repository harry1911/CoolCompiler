
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNrightNOTnonassocLESSEQUALLESSEQUALleftPLUSMINUSleftSTARDIVrightISVOIDrightCOMPLEMENTleftATleftDOTARROW ASSIGN AT CASE CBRACKET CCURLY CLASS COLON COMMA COMPLEMENT DIV DOT ELSE EQUAL ESAC FALSE FI IDENTIFIER IF IN INHERITS INTEGER ISVOID LESS LESSEQUAL LET LOOP MINUS NEW NOT OBRACKET OCURLY OF PLUS POOL SEMICOLON STAR STRING THEN TRUE TYPE WHILE\n        program : class SEMICOLON class_list\n        \n        class_list : class SEMICOLON class_list\n        \n        class_list : empty\n        \n        class : CLASS TYPE inherits OCURLY feature_list CCURLY\n        \n        inherits : INHERITS TYPE\n        \n        inherits : empty\n        \n        feature_list : feature_attribute SEMICOLON feature_list\n        \n        feature_list : feature_method SEMICOLON feature_list\n        \n        feature_list : empty\n        \n        feature_method : IDENTIFIER OBRACKET formal_params_list CBRACKET COLON TYPE OCURLY expression CCURLY\n        \n        feature_attribute : IDENTIFIER COLON TYPE ASSIGN expression\n        \n        feature_attribute : IDENTIFIER COLON TYPE\n        \n        formal_params_list : formal more_formal_params_list\n        \n        formal_params_list : empty\n        \n        more_formal_params_list : COMMA formal more_formal_params_list\n        \n        more_formal_params_list : empty\n        \n        formal : IDENTIFIER COLON TYPE\n        \n        expression_list : expression more_expression_list\n        \n        expression_list : empty\n        \n        more_expression_list : COMMA expression more_expression_list\n        \n        more_expression_list : empty\n        \n        block_expression_list : expression SEMICOLON\n        \n        block_expression_list : expression SEMICOLON block_expression_list\n        \n        let_expressions : IDENTIFIER COLON TYPE let_list\n        \n        let_expressions : IDENTIFIER COLON TYPE ASSIGN expression let_list\n        \n        let_list : COMMA IDENTIFIER COLON TYPE let_list\n        \n        let_list : COMMA IDENTIFIER COLON TYPE ASSIGN expression let_list\n        \n        let_list : empty\n        \n        branch_list : branch branch_list\n        \n        branch_list : branch\n        \n        branch : IDENTIFIER COLON TYPE ARROW expression SEMICOLON\n        \n        expression : IDENTIFIER\n        \n        expression : NEW TYPE\n        \n        expression : OCURLY block_expression_list CCURLY\n        \n        expression : IF expression THEN expression ELSE expression FI\n        \n        expression : WHILE expression LOOP expression POOL\n        \n        expression : CASE expression OF branch_list ESAC\n        \n        expression : expression DOT IDENTIFIER OBRACKET expression_list CBRACKET\n        \n        expression : expression AT TYPE DOT IDENTIFIER OBRACKET expression_list CBRACKET\n        \n        expression : IDENTIFIER OBRACKET expression_list CBRACKET\n        \n        expression : LET let_expressions IN expression\n        \n        expression : INTEGER\n        \n        expression : STRING\n        \n        expression : TRUE\n        \n        expression : FALSE\n        \n        expression : IDENTIFIER ASSIGN expression\n        \n        expression : expression PLUS expression\n        \n        expression : expression MINUS expression\n        \n        expression : expression STAR expression\n        \n        expression : expression DIV expression\n        \n        expression : expression EQUAL expression\n        \n        expression : expression LESS expression\n        \n        expression : expression LESSEQUAL expression\n        \n        expression : COMPLEMENT expression\n        \n        expression : NOT expression\n        \n        expression : ISVOID expression\n        \n        expression : OBRACKET expression CBRACKET\n        \n        empty : \n        '
    
_lr_action_items = {'CLASS':([0,4,12,],[3,3,3,]),'$end':([1,4,7,8,12,15,],[0,-58,-1,-3,-58,-2,]),'SEMICOLON':([2,6,17,18,21,28,39,40,48,49,50,51,69,71,78,79,80,86,89,90,91,92,93,94,95,96,101,105,117,124,125,132,134,141,145,146,],[4,12,22,23,-4,-12,-32,-11,-42,-43,-44,-45,-33,97,-54,-55,-56,-46,-47,-48,-49,-50,-51,-52,-53,-34,-57,-40,-41,-36,-37,-10,-38,-35,-39,148,]),'TYPE':([3,10,24,34,41,56,61,103,127,144,],[5,14,28,55,69,81,88,118,137,147,]),'INHERITS':([5,],[10,]),'OCURLY':([5,9,11,14,33,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,81,97,98,99,102,104,107,109,123,129,135,142,150,],[-58,13,-6,-5,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,104,42,42,42,42,42,42,42,42,42,42,42,42,]),'IDENTIFIER':([13,22,23,25,33,37,42,43,44,45,46,47,52,53,54,58,59,60,62,63,64,65,66,67,68,97,98,99,100,102,104,107,109,110,115,123,129,130,135,142,148,150,],[20,20,20,29,39,29,39,39,39,39,39,77,39,39,39,39,39,87,39,39,39,39,39,39,39,39,39,39,116,39,39,39,39,122,116,39,39,139,39,39,-31,39,]),'CCURLY':([13,16,19,22,23,26,27,39,48,49,50,51,69,70,78,79,80,86,89,90,91,92,93,94,95,96,97,101,105,111,117,119,124,125,134,141,145,],[-58,21,-9,-58,-58,-7,-8,-32,-42,-43,-44,-45,-33,96,-54,-55,-56,-46,-47,-48,-49,-50,-51,-52,-53,-34,-22,-57,-40,-23,-41,132,-36,-37,-38,-35,-39,]),'COLON':([20,29,35,77,116,139,],[24,34,56,103,127,144,]),'OBRACKET':([20,33,39,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,87,97,98,99,102,104,107,109,122,123,129,135,142,150,],[25,46,58,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,109,46,46,46,46,46,46,46,135,46,46,46,46,46,]),'CBRACKET':([25,30,31,32,36,38,39,48,49,50,51,55,57,58,69,75,78,79,80,82,83,84,85,86,89,90,91,92,93,94,95,96,101,105,106,108,109,117,120,121,124,125,133,134,135,140,141,145,],[-58,35,-58,-14,-13,-16,-32,-42,-43,-44,-45,-17,-58,-58,-33,101,-54,-55,-56,-15,105,-58,-19,-46,-47,-48,-49,-50,-51,-52,-53,-34,-57,-40,-18,-21,-58,-41,-58,134,-36,-37,-20,-38,-58,145,-35,-39,]),'ASSIGN':([28,39,118,147,],[33,59,129,150,]),'COMMA':([31,39,48,49,50,51,55,57,69,78,79,80,84,86,89,90,91,92,93,94,95,96,101,105,117,118,120,124,125,134,138,141,145,147,151,],[37,-32,-42,-43,-44,-45,-17,37,-33,-54,-55,-56,107,-46,-47,-48,-49,-50,-51,-52,-53,-34,-57,-40,-41,130,107,-36,-37,-38,130,-35,-39,130,130,]),'NEW':([33,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,97,98,99,102,104,107,109,123,129,135,142,150,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'IF':([33,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,97,98,99,102,104,107,109,123,129,135,142,150,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'WHILE':([33,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,97,98,99,102,104,107,109,123,129,135,142,150,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'CASE':([33,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,97,98,99,102,104,107,109,123,129,135,142,150,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'LET':([33,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,97,98,99,102,104,107,109,123,129,135,142,150,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'INTEGER':([33,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,97,98,99,102,104,107,109,123,129,135,142,150,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'STRING':([33,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,97,98,99,102,104,107,109,123,129,135,142,150,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'TRUE':([33,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,97,98,99,102,104,107,109,123,129,135,142,150,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'FALSE':([33,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,97,98,99,102,104,107,109,123,129,135,142,150,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'COMPLEMENT':([33,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,97,98,99,102,104,107,109,123,129,135,142,150,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'NOT':([33,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,97,98,99,102,104,107,109,123,129,135,142,150,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'ISVOID':([33,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,97,98,99,102,104,107,109,123,129,135,142,150,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'DOT':([39,40,48,49,50,51,69,71,72,73,74,75,78,79,80,84,86,88,89,90,91,92,93,94,95,96,101,105,112,113,117,119,120,124,125,134,136,138,141,145,146,151,],[-32,60,-42,-43,-44,-45,-33,60,60,60,60,60,60,60,60,60,60,110,60,60,60,60,60,60,60,-34,-57,-40,60,60,60,60,60,-36,-37,-38,60,60,-35,-39,60,60,]),'AT':([39,40,48,49,50,51,69,71,72,73,74,75,78,79,80,84,86,89,90,91,92,93,94,95,96,101,105,112,113,117,119,120,124,125,134,136,138,141,145,146,151,],[-32,61,-42,-43,-44,-45,-33,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-34,-57,-40,61,61,61,61,61,-36,-37,-38,61,61,-35,-39,61,61,]),'PLUS':([39,40,48,49,50,51,69,71,72,73,74,75,78,79,80,84,86,89,90,91,92,93,94,95,96,101,105,112,113,117,119,120,124,125,134,136,138,141,145,146,151,],[-32,62,-42,-43,-44,-45,-33,62,62,62,62,62,-54,62,-56,62,62,-47,-48,-49,-50,62,62,62,-34,-57,-40,62,62,62,62,62,-36,-37,-38,62,62,-35,-39,62,62,]),'MINUS':([39,40,48,49,50,51,69,71,72,73,74,75,78,79,80,84,86,89,90,91,92,93,94,95,96,101,105,112,113,117,119,120,124,125,134,136,138,141,145,146,151,],[-32,63,-42,-43,-44,-45,-33,63,63,63,63,63,-54,63,-56,63,63,-47,-48,-49,-50,63,63,63,-34,-57,-40,63,63,63,63,63,-36,-37,-38,63,63,-35,-39,63,63,]),'STAR':([39,40,48,49,50,51,69,71,72,73,74,75,78,79,80,84,86,89,90,91,92,93,94,95,96,101,105,112,113,117,119,120,124,125,134,136,138,141,145,146,151,],[-32,64,-42,-43,-44,-45,-33,64,64,64,64,64,-54,64,-56,64,64,64,64,-49,-50,64,64,64,-34,-57,-40,64,64,64,64,64,-36,-37,-38,64,64,-35,-39,64,64,]),'DIV':([39,40,48,49,50,51,69,71,72,73,74,75,78,79,80,84,86,89,90,91,92,93,94,95,96,101,105,112,113,117,119,120,124,125,134,136,138,141,145,146,151,],[-32,65,-42,-43,-44,-45,-33,65,65,65,65,65,-54,65,-56,65,65,65,65,-49,-50,65,65,65,-34,-57,-40,65,65,65,65,65,-36,-37,-38,65,65,-35,-39,65,65,]),'EQUAL':([39,40,48,49,50,51,69,71,72,73,74,75,78,79,80,84,86,89,90,91,92,93,94,95,96,101,105,112,113,117,119,120,124,125,134,136,138,141,145,146,151,],[-32,66,-42,-43,-44,-45,-33,66,66,66,66,66,-54,66,-56,66,66,-47,-48,-49,-50,None,None,None,-34,-57,-40,66,66,66,66,66,-36,-37,-38,66,66,-35,-39,66,66,]),'LESS':([39,40,48,49,50,51,69,71,72,73,74,75,78,79,80,84,86,89,90,91,92,93,94,95,96,101,105,112,113,117,119,120,124,125,134,136,138,141,145,146,151,],[-32,67,-42,-43,-44,-45,-33,67,67,67,67,67,-54,67,-56,67,67,-47,-48,-49,-50,None,None,None,-34,-57,-40,67,67,67,67,67,-36,-37,-38,67,67,-35,-39,67,67,]),'LESSEQUAL':([39,40,48,49,50,51,69,71,72,73,74,75,78,79,80,84,86,89,90,91,92,93,94,95,96,101,105,112,113,117,119,120,124,125,134,136,138,141,145,146,151,],[-32,68,-42,-43,-44,-45,-33,68,68,68,68,68,-54,68,-56,68,68,-47,-48,-49,-50,None,None,None,-34,-57,-40,68,68,68,68,68,-36,-37,-38,68,68,-35,-39,68,68,]),'THEN':([39,48,49,50,51,69,72,78,79,80,86,89,90,91,92,93,94,95,96,101,105,117,124,125,134,141,145,],[-32,-42,-43,-44,-45,-33,98,-54,-55,-56,-46,-47,-48,-49,-50,-51,-52,-53,-34,-57,-40,-41,-36,-37,-38,-35,-39,]),'LOOP':([39,48,49,50,51,69,73,78,79,80,86,89,90,91,92,93,94,95,96,101,105,117,124,125,134,141,145,],[-32,-42,-43,-44,-45,-33,99,-54,-55,-56,-46,-47,-48,-49,-50,-51,-52,-53,-34,-57,-40,-41,-36,-37,-38,-35,-39,]),'OF':([39,48,49,50,51,69,74,78,79,80,86,89,90,91,92,93,94,95,96,101,105,117,124,125,134,141,145,],[-32,-42,-43,-44,-45,-33,100,-54,-55,-56,-46,-47,-48,-49,-50,-51,-52,-53,-34,-57,-40,-41,-36,-37,-38,-35,-39,]),'ELSE':([39,48,49,50,51,69,78,79,80,86,89,90,91,92,93,94,95,96,101,105,112,117,124,125,134,141,145,],[-32,-42,-43,-44,-45,-33,-54,-55,-56,-46,-47,-48,-49,-50,-51,-52,-53,-34,-57,-40,123,-41,-36,-37,-38,-35,-39,]),'POOL':([39,48,49,50,51,69,78,79,80,86,89,90,91,92,93,94,95,96,101,105,113,117,124,125,134,141,145,],[-32,-42,-43,-44,-45,-33,-54,-55,-56,-46,-47,-48,-49,-50,-51,-52,-53,-34,-57,-40,124,-41,-36,-37,-38,-35,-39,]),'FI':([39,48,49,50,51,69,78,79,80,86,89,90,91,92,93,94,95,96,101,105,117,124,125,134,136,141,145,],[-32,-42,-43,-44,-45,-33,-54,-55,-56,-46,-47,-48,-49,-50,-51,-52,-53,-34,-57,-40,-41,-36,-37,-38,141,-35,-39,]),'IN':([39,48,49,50,51,69,76,78,79,80,86,89,90,91,92,93,94,95,96,101,105,117,118,124,125,128,131,134,138,141,143,145,147,149,151,152,],[-32,-42,-43,-44,-45,-33,102,-54,-55,-56,-46,-47,-48,-49,-50,-51,-52,-53,-34,-57,-40,-41,-58,-36,-37,-24,-28,-38,-58,-35,-25,-39,-58,-26,-58,-27,]),'ESAC':([114,115,126,148,],[125,-30,-29,-31,]),'ARROW':([137,],[142,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class':([0,4,12,],[2,6,6,]),'class_list':([4,12,],[7,15,]),'empty':([4,5,12,13,22,23,25,31,57,58,84,109,118,120,135,138,147,151,],[8,11,8,19,19,19,32,38,38,85,108,85,131,108,85,131,131,131,]),'inherits':([5,],[9,]),'feature_list':([13,22,23,],[16,26,27,]),'feature_attribute':([13,22,23,],[17,17,17,]),'feature_method':([13,22,23,],[18,18,18,]),'formal_params_list':([25,],[30,]),'formal':([25,37,],[31,57,]),'more_formal_params_list':([31,57,],[36,82,]),'expression':([33,42,43,44,45,46,52,53,54,58,59,62,63,64,65,66,67,68,97,98,99,102,104,107,109,123,129,135,142,150,],[40,71,72,73,74,75,78,79,80,84,86,89,90,91,92,93,94,95,71,112,113,117,119,120,84,136,138,84,146,151,]),'block_expression_list':([42,97,],[70,111,]),'let_expressions':([47,],[76,]),'expression_list':([58,109,135,],[83,121,140,]),'more_expression_list':([84,120,],[106,133,]),'branch_list':([100,115,],[114,126,]),'branch':([100,115,],[115,115,]),'let_list':([118,138,147,151,],[128,143,149,152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class SEMICOLON class_list','program',3,'p_program','grammar_rules.py',49),
  ('class_list -> class SEMICOLON class_list','class_list',3,'p_class_list','grammar_rules.py',55),
  ('class_list -> empty','class_list',1,'p_class_list_empty','grammar_rules.py',61),
  ('class -> CLASS TYPE inherits OCURLY feature_list CCURLY','class',6,'p_class','grammar_rules.py',67),
  ('inherits -> INHERITS TYPE','inherits',2,'p_class_inherits','grammar_rules.py',73),
  ('inherits -> empty','inherits',1,'p_class_inherits_empty','grammar_rules.py',79),
  ('feature_list -> feature_attribute SEMICOLON feature_list','feature_list',3,'p_feature_list_attribute','grammar_rules.py',85),
  ('feature_list -> feature_method SEMICOLON feature_list','feature_list',3,'p_feature_list_method','grammar_rules.py',91),
  ('feature_list -> empty','feature_list',1,'p_feature_list_empty','grammar_rules.py',97),
  ('feature_method -> IDENTIFIER OBRACKET formal_params_list CBRACKET COLON TYPE OCURLY expression CCURLY','feature_method',9,'p_feature_method','grammar_rules.py',103),
  ('feature_attribute -> IDENTIFIER COLON TYPE ASSIGN expression','feature_attribute',5,'p_feature_attribute_initialized','grammar_rules.py',110),
  ('feature_attribute -> IDENTIFIER COLON TYPE','feature_attribute',3,'p_feature_attribute','grammar_rules.py',116),
  ('formal_params_list -> formal more_formal_params_list','formal_params_list',2,'p_formal_params_list','grammar_rules.py',122),
  ('formal_params_list -> empty','formal_params_list',1,'p_formal_params_list_empty','grammar_rules.py',128),
  ('more_formal_params_list -> COMMA formal more_formal_params_list','more_formal_params_list',3,'p_more_formal_params_list','grammar_rules.py',134),
  ('more_formal_params_list -> empty','more_formal_params_list',1,'p_more_formal_params_list_empty','grammar_rules.py',140),
  ('formal -> IDENTIFIER COLON TYPE','formal',3,'p_formal','grammar_rules.py',146),
  ('expression_list -> expression more_expression_list','expression_list',2,'p_expression_list','grammar_rules.py',153),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','grammar_rules.py',159),
  ('more_expression_list -> COMMA expression more_expression_list','more_expression_list',3,'p_more_expression_list','grammar_rules.py',165),
  ('more_expression_list -> empty','more_expression_list',1,'p_more_expression_list_empty','grammar_rules.py',171),
  ('block_expression_list -> expression SEMICOLON','block_expression_list',2,'p_block_expression_list_simple','grammar_rules.py',177),
  ('block_expression_list -> expression SEMICOLON block_expression_list','block_expression_list',3,'p_block_expression_list','grammar_rules.py',183),
  ('let_expressions -> IDENTIFIER COLON TYPE let_list','let_expressions',4,'p_let_expressions_simple','grammar_rules.py',189),
  ('let_expressions -> IDENTIFIER COLON TYPE ASSIGN expression let_list','let_expressions',6,'p_let_expressions','grammar_rules.py',195),
  ('let_list -> COMMA IDENTIFIER COLON TYPE let_list','let_list',5,'p_let_list_simple','grammar_rules.py',201),
  ('let_list -> COMMA IDENTIFIER COLON TYPE ASSIGN expression let_list','let_list',7,'p_let_list','grammar_rules.py',207),
  ('let_list -> empty','let_list',1,'p_let_list_empty','grammar_rules.py',213),
  ('branch_list -> branch branch_list','branch_list',2,'p_branch_list','grammar_rules.py',219),
  ('branch_list -> branch','branch_list',1,'p_branch_list_simple','grammar_rules.py',225),
  ('branch -> IDENTIFIER COLON TYPE ARROW expression SEMICOLON','branch',6,'p_branch','grammar_rules.py',231),
  ('expression -> IDENTIFIER','expression',1,'p_expression_object_id','grammar_rules.py',240),
  ('expression -> NEW TYPE','expression',2,'p_expression_new','grammar_rules.py',246),
  ('expression -> OCURLY block_expression_list CCURLY','expression',3,'p_expression_block','grammar_rules.py',252),
  ('expression -> IF expression THEN expression ELSE expression FI','expression',7,'p_expression_if','grammar_rules.py',259),
  ('expression -> WHILE expression LOOP expression POOL','expression',5,'p_expression_while','grammar_rules.py',265),
  ('expression -> CASE expression OF branch_list ESAC','expression',5,'p_expression_case','grammar_rules.py',271),
  ('expression -> expression DOT IDENTIFIER OBRACKET expression_list CBRACKET','expression',6,'p_expression_dynamic_dispatch','grammar_rules.py',278),
  ('expression -> expression AT TYPE DOT IDENTIFIER OBRACKET expression_list CBRACKET','expression',8,'p_expression_static_dispatch','grammar_rules.py',284),
  ('expression -> IDENTIFIER OBRACKET expression_list CBRACKET','expression',4,'p_expression_self_dispatch','grammar_rules.py',291),
  ('expression -> LET let_expressions IN expression','expression',4,'p_expression_let','grammar_rules.py',298),
  ('expression -> INTEGER','expression',1,'p_expression_integer_constant','grammar_rules.py',305),
  ('expression -> STRING','expression',1,'p_expression_string_constant','grammar_rules.py',311),
  ('expression -> TRUE','expression',1,'p_expression_BOOLEAN_true_constant','grammar_rules.py',317),
  ('expression -> FALSE','expression',1,'p_expression_BOOLEAN_false_constant','grammar_rules.py',323),
  ('expression -> IDENTIFIER ASSIGN expression','expression',3,'p_expression_assign','grammar_rules.py',329),
  ('expression -> expression PLUS expression','expression',3,'p_expression_plus','grammar_rules.py',336),
  ('expression -> expression MINUS expression','expression',3,'p_expression_minus','grammar_rules.py',342),
  ('expression -> expression STAR expression','expression',3,'p_expression_star','grammar_rules.py',348),
  ('expression -> expression DIV expression','expression',3,'p_expression_div','grammar_rules.py',354),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_equal','grammar_rules.py',360),
  ('expression -> expression LESS expression','expression',3,'p_expression_lessthan','grammar_rules.py',366),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression_lessequal','grammar_rules.py',372),
  ('expression -> COMPLEMENT expression','expression',2,'p_expression_complement','grammar_rules.py',379),
  ('expression -> NOT expression','expression',2,'p_expression_negation','grammar_rules.py',385),
  ('expression -> ISVOID expression','expression',2,'p_expression_isvoid','grammar_rules.py',391),
  ('expression -> OBRACKET expression CBRACKET','expression',3,'p_expression_parenthesis','grammar_rules.py',398),
  ('empty -> <empty>','empty',0,'p_empty','grammar_rules.py',405),
]
